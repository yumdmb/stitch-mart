{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({\n  protectedKeys,\n  needsAnimating\n}, key) {\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, {\n  delay = 0,\n  transitionOverride,\n  type\n} = {}) {\n  var _a;\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = targetAndTransition;\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    const valueTarget = target[key];\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    let isHandoff = false;\n    if (window.HandoffAppearAnimations) {\n      const props = visualElement.getProps();\n      const appearId = props[optimizedAppearDataAttribute];\n      if (appearId) {\n        const elapsed = window.HandoffAppearAnimations(appearId, key);\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          isHandoff = true;\n        }\n      }\n    }\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    const animation = value.animation;\n    if (animation) {\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n        animation.then(() => willChange.remove(key));\n      }\n      animations.push(animation);\n    }\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      frame.update(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","protectedKeys","needsAnimating","key","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","_a","transition","getDefaultTransition","transitionEnd","target","willChange","getValue","animations","animationTypeState","animationState","getState","value","latestValues","valueTarget","undefined","valueTransition","elapsed","isHandoff","window","HandoffAppearAnimations","props","getProps","appearId","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all","update"],"sources":["C:/Users/adam arbain/OneDrive - Universiti Malaya/Desktop/backUp/degree/sem 4/wif2003 web prog/Group Project  Web Prog/stitch-mart/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.HandoffAppearAnimations) {\n            const props = visualElement.getProps();\n            const appearId = props[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    isHandoff = true;\n                }\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n                animation.then(() => willChange.remove(key));\n            }\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}